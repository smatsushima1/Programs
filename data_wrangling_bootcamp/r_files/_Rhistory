prettyNum(sum(as.numeric(plottingData[[tag]]$count)),big.mark=","),
prettyNum(as.numeric(configurationData[["SleepyTime"]]),big.mark=","))
yMax <- max(plottingData[[tag]]$count)
if(tag == tagOfInterest)
{
print(tag)
print(data)
}
## chuck
plotStackedData(xMin, xMax, yMin, yMax, xLabel, yLabel, mainTitle, data, myColors)
}
}
par(oldPar)
plottingData
}
plotStackedData <- function(xMin, xMax, yMin, yMax, xLabel, yLabel, mainTitle, data, myColors, custom=NULL) {
if (is.null(custom) == TRUE)
{
plot(x=c(xMin, xMax), y=c(yMin, yMax), type="n", main=mainTitle, xlab=xLabel, ylab=yLabel)
}
else
{
plot(x=c(xMin, xMax), y=c(yMin, yMax), type="n", main=mainTitle, xlab=xLabel, ylab=yLabel,
xaxt="n")
axis(1, at=seq(1:length(custom)), labels=FALSE)
text(seq(1, length(custom), by=1),
par("usr")[3] - 0.2,
labels=custom, srt=-45, pos = 1,
xpd = TRUE)
}
xS <- c(xMin:(xMin + length(data[[1]]) - 1), (xMin + length(data[[1]]) - 1):xMin)
#print("xS");print(xS)
polyBottom <- rep(0, length(data[[1]]))
for (i in 1:length(data))
{
#	   print(sprintf("i = %.0f",i))
#print(c(data[[1]],rev(data[[1]])))
for (j in 1:length(data[[1]]))
{
if (j == 1)
{
polyData <- data[[i]][j] + polyBottom[j]
}
else
{
polyData <- c(polyData, (data[[i]][j] + polyBottom[j]))
}
}
polyData <- c(polyData,rev(polyBottom))
#	    print("polyData");print(polyData)
#print("polyBottom");print(polyBottom)
polygon(xS, polyData, col=myColors[i])
for (j in 1:length(data[[1]]))
{
polyBottom[j] <- polyBottom[j] + data[[i]][j]
}
}
}
plotStackedDataOrig <- function(xMin, xMax, yMin, yMax, xLabel, yLabel, mainTitle, data, myColors) {
plot(x=c(xMin, xMax), y=c(yMin, yMax), type="n", main=mainTitle, xlab=xLabel, ylab=yLabel)
xS <- c(xMin:(xMin + length(data[[1]]) - 1), (xMin + length(data[[1]]) - 1):xMin)
#print("xS");print(xS)
polyBottom <- rep(0, length(data[[1]]))
for (i in 1:length(data))
{
#	   print(sprintf("i = %.0f",i))
#print(c(data[[1]],rev(data[[1]])))
for (j in 1:length(data[[1]]))
{
if (j == 1)
{
polyData <- data[[i]][j] + polyBottom[j]
}
else
{
polyData <- c(polyData, (data[[i]][j] + polyBottom[j]))
}
}
polyData <- c(polyData,rev(polyBottom))
#	    print("polyData");print(polyData)
#print("polyBottom");print(polyBottom)
polygon(xS, polyData, col=myColors[i])
for (j in 1:length(data[[1]]))
{
polyBottom[j] <- polyBottom[j] + data[[i]][j]
}
}
}
hashTagIncluded <- function(tag, words)
{
## hashTag <- sprintf("@%s", tag)
returnValue <- tag %in% words
returnValue
}
plotSentimentDataControl <- function(configurationData, dbCon, positiveWords, negativeWords, stopWords, hashTags, saveFile)
{
unlink(saveFile)
sleepyTime <- as.numeric(configurationData[["SleepyTime"]])
polls <- as.numeric(configurationData[["Poll"]])
table <- configurationData[["PostgresTable"]]
sqlQuery <- sprintf("select min(time) as earliest from %s;",
table)
results <- dbGetQuery(dbCon, sqlQuery)
timeStart <- results[1,1]
sqlQuery <- sprintf("select max(time) as earliest from %s;",
table)
results <- dbGetQuery(dbCon, sqlQuery)
timeEnding <- results[1,1]
pollPlottingData <- NULL
plottingData <- NULL
emptyClassifications <- classify(NULL, positiveWords, negativeWords, configurationData, count = 0)
totalResults <- 0
missingTags <- 0
returnValue <- c()
for (p in 1:polls)
{
pollPlottingData <- list()
timeEnd <- timeStart + sleepyTime
sqlQuery <- sprintf("select data from %s where %.0f <= time and time < %.0f order by time;",   #" limit 4;",
table, timeStart, timeEnd)
print(sqlQuery)
lines <- dbGetQuery(dbCon, sqlQuery)
numberOfResults <- nrow(lines)
print(sprintf("Poll %.0f of %.0f, there are %.0f lines to process.",
p, polls, numberOfResults))
totalResults <- totalResults + numberOfResults
if (numberOfResults > 0)
{
## print(names(lines))
## print(lines)
for (i in 1:numberOfResults)
{
tryCatch(
{
l <- lines$data[i]
json <- base64Decode(l)
returnValue <- c(returnValue, json)
## print(sprintf("nchar(l) = %.0f, nchar(json) = %.0f",
##               nchar(l),
##               nchar(json)))
## print(l)
## print(json)
## return(0)
df <- parseTweets(json, simplify=FALSE, verbose=FALSE)
## print(names(df))
## print(head(df))
## print("df$text");print(df$text)
rawTweet <- df$text
tweetText <- processText(rawTweet, stopWords)
## tweetText <- normalizedText(rawTweet)
## tweetText <- strsplit(tweetText, "\\s+", perl=TRUE)[[1]]
## ## print(tweetText)
## ## print(tweetText)
## tweetText <- cleansedText(tweetText, stopWords)
classifications <- classify(tweetText, positiveWords, negativeWords, configurationData)
## classifications <- classify(tweetText, c("because","the"), negativeWords)
## print(tweetText)
## print(classifications)
foundHashTag <- FALSE
for (h in hashTags)
{
if (hashTagIncluded(h, tweetText) == TRUE)
{
foundHashTag <- TRUE
## print(sprintf("Processing %s",h))
if (is.null(pollPlottingData[[h]]) == TRUE)
{
pollPlottingData[[h]] <- classifications
}
else
{
temp <- pollPlottingData[[h]]
## print("updating plotting data");print(h);print(temp)
pollPlottingData[[h]] <- list("positive" = (temp[["positive"]] + classifications[["positive"]]),
"negative" = (temp[["negative"]] + classifications[["negative"]]),
"neutral" = (temp[["neutral"]] + classifications[["neutral"]]),
"count" = (temp[["count"]] + classifications[["count"]])
)
}
}
}
if (foundHashTag == FALSE)
{
print(sprintf("Poll %.0f, record %.0f of %.0f. No hashtag found in tweet text: %s.",
p, i, numberOfResults, rawTweet))
print("Tweet tokens:")
print(tweetText)
## return(0)
## for (h in hashTags)
## {
##     print(sprintf("%s %s", h, hashTagIncluded(h, tweetText)))
## }
missingTags <- missingTags + 1
}
},
error = function(e){
print(sprintf("Error processing %.0f of %.0f records.  Line skipped.", i, numberOfResults))
}
)
## print(pollPlottingData)
}
for (h in hashTags)
{
if (is.null(pollPlottingData[[h]]) == TRUE)
{
pollPlottingData[[h]] <- emptyClassifications
}
}
}
plottingData <- plotSentimentData (hashTags, pollPlottingData, plottingData, p, polls, configurationData)
timeStart <- timeEnd
## Sys.sleep(sleepyTime)
}
plottingData <- plotSentimentData (hashTags, pollPlottingData, plottingData, p, polls, configurationData)
print(sprintf("Total %.0f tweets processed, %.0f missing all tags (%.0f%s).",
totalResults, missingTags, (missingTags/totalResults) * 100, "%"))
save(returnValue, file = saveFile)
}
main <- function()
{
configurationData <- parseConfigurationFile()
## print(configurationData)
dbCon <- connectToDatabase(configurationData)
lexicon <- lexiconWords(configurationData)
positiveWords <- lexicon[["positive"]]
negativeWords <- lexicon[["negative"]]
stopWords <- getStopWords(configurationData)
positiveWords <- normalizedText(positiveWords)
negativeWords <- normalizedText(negativeWords)
stopWords <- normalizedText(stopWords)
sleepyTime <- as.numeric(configurationData[["SleepyTime"]])
polls <- as.numeric(configurationData[["Poll"]])
table <- configurationData[["PostgresTable"]]
hashTags <- configurationData[["Hashtag"]]
## print(length(positiveWords))
sqlQuery <- sprintf("select min(time) as earliest from %s;",
table)
results <- dbGetQuery(dbCon, sqlQuery)
timeStart <- results[1,1]
sqlQuery <- sprintf("select max(time) as earliest from %s;",
table)
results <- dbGetQuery(dbCon, sqlQuery)
timeEnding <- results[1,1]
print(sprintf("Earliest time in database: %.0f.  The latest time in the database: %.0f",
timeStart, timeEnding))
temp <- as.integer((timeEnding - timeStart) / (polls))
print(sprintf("Updating sleepyTime from %.0f to %.0f seconds.", sleepyTime, temp))
sleepyTime <- temp
configurationData[["SleepyTime"]] <- as.character(sleepyTime)
jsonTweetFile <- "tweetsData"
funcs <- c(plotSentimentDataControl, plotSendingData, plotLocationData)
for (f in funcs)
{
par(mar = c(1, 3, 2, 1))
d <- f(configurationData, dbCon, positiveWords, negativeWords, stopWords, hashTags, jsonTweetFile)
readline(prompt="Press RETURN to go to the next plot.")
dev.off()
}
d
}
par(mar = c(1, 3, 2, 1))
main()
## http://thinktostart.com/twitter-authentification-with-r/
## https://mkmanu.wordpress.com/2014/08/05/sentiment-analysis-on-twitter-data-text-analytics-tutorial/
rm(list=ls())
library(openssl)
library(httr)
library(jsonlite)
library(bitops)
library(RCurl)
## library(rjson)
library(ROAuth)
library(DBI)
library(RPostgreSQL)
library(streamR)
source("library.R")
searcher <- function(dbCon, table, configurationData, refreshStrings, token=NULL)
{
## https://cran.r-project.org/web/packages/jsonlite/vignettes/json-apis.html
#Create your own appication key at https://dev.twitter.com/apps
## https://dev.twitter.com/rest/reference/get/search/tweets
hashTags <- configurationData[["Hashtag"]]
downloadMinimum <- 1000
sampleMaximum <- 2
header <- "https://api.twitter.com/1.1/search/tweets.json"
if (is.null(token) == TRUE)
{
print("Token is NULL.")
#Use basic auth
consumer_key <- configurationData[["APIPublicKey"]]
consumer_secret <- configurationData[["APIPrivateKey"]]
secret <- openssl::base64_encode(paste(consumer_key, consumer_secret, sep = ":"));
req <- httr::POST("https://api.twitter.com/oauth2/token",
httr::add_headers(
"Authorization" = paste("Basic", secret),
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"
),
body = "grant_type=client_credentials"
);
## print("req");print(req)
#Extract the access token
token <- paste("Bearer", httr::content(req)$access_token)
}
## print("token");print(token)
for (h in hashTags)
{
for (s in 1:sampleMaximum)
{
if(is.null(refreshStrings[[h]]) == TRUE)
{
base <- sprintf("?q=@%s&result_type=recent&count=100",
h)
}
else
{
base <- sprintf("%s&count=100", refreshStrings[[h]])
}
url <- sprintf("%s%s", header, base)
## print("url");print(url)
numberOfCharacters <- downloadMinimum
tryCatch(
{
req <- httr::GET(url, add_headers(Authorization = token))
## print("req");print(req)
json <- httr::content(req, as = "text")
numberOfCharacters <- nchar(json)
d <- fromJSON(json)
## print("type of d"); print(typeof(d))
## print("head"); print(head(d))
## print("created_at")
## print(names(d))
## print("nrow(d[[\"statuses\"]])");             print(nrow(d[["statuses"]]))
## tweets <- as.data.frame(d[["statuses"]])
tweets <- d[["statuses"]]
## print("names(tweets)");print(names(tweets))
## print(tweets[[1]])
numberOfTweets <- length(tweets)
print(sprintf("%s has %.0f tweets", h, numberOfTweets))
if (numberOfTweets > 0)
{
for (i in 1:numberOfTweets)
{
a <- tweets[[i]]$created_at
unixSeconds <- as.numeric(as.POSIXct(substr(a, 5, nchar(a)),
format="%B %d %T +0000 %Y"))
data <- unclass(base64(toJSON(tweets[[i]])))
## print(sprintf("%.0f %s", unixSeconds, data))
## print(sprintf("%.0f %.0f", i, unixSeconds, data))
updateTable(dbCon, table, unixSeconds, data, configurationData)
## print(tweets[[i]])
## chuck
}
}
refreshStrings[[h]] <- d[["search_metadata"]]$next_results
## print(refreshStrings[[h]])
},
error = function(e){
print(sprintf("Error processing sample %.0f for hashtag %s, sample skipped.",
s, h))
}
)
if (numberOfCharacters < downloadMinimum)
{
print(sprintf("%s: pass %.0f: %.0f bytes downloaded, less than desired minimum of %.0f bytes.",
h, s, numberOfCharacters,  downloadMinimum))
break
}
}
}
refreshStrings
}
updateTable <- function(con, table, tweetTime, tweetData, configurationData)
{
## print(sprintf("%s() updating table %s with time %.0f",
##               as.character(match.call()[[1]]),
##               table,
##               tweetTime))
df <- data.frame(tweetTime, tweetData, row.names=NULL)
dbWriteTable(con, table,
value = df,
append = TRUE,
row.names = FALSE)
if (is.null(configurationData[["CollectionFile"]]) == FALSE)
{
## print(df)
write.table(df, file=configurationData[["CollectionFile"]],
append=TRUE, sep=" ",
quote=FALSE, row.names = FALSE,
col.names=FALSE)
}
}
createTables <- function(con, configurationData)
{
table <- configurationData[["PostgresTable"]]
user <- configurationData[["PostgresUser"]]
print(sprintf("%s() dropping and creating the table %s",
as.character(match.call()[[1]]), table))
sql_command <- sprintf("DROP TABLE IF EXISTS %s;
CREATE TABLE %s (
time numeric,
data varchar(800000))
WITH (
OIDS=FALSE
);
ALTER TABLE %s
OWNER TO %s;"
, table, table, table, user)
dbGetQuery(con, sql_command)
}
main <- function()
{
configurationData <- parseConfigurationFile()
## print(configurationData)
dbCon <- connectToDatabase(configurationData)
if (configurationData[["ResetDatabase"]] == "TRUE")
{
createTables(dbCon, configurationData)
}
startTime <- 0
diff <- 0
sleepyTime <- as.numeric(configurationData[["SleepyTime"]])
polls <- as.numeric(configurationData[["Poll"]])
table <- configurationData[["PostgresTable"]]
hashTags <- configurationData[["Hashtag"]]
live <- TRUE
con <- NULL
if (is.null(configurationData[["SourceFile"]]) == FALSE)
{
print(sprintf("Source file = %s",configurationData[["SourceFile"]]))
con <- file(configurationData[["SourceFile"]], "r")
line <- readLines(con, n = 1)
fields <- strsplit(line, split=" ")
startTime <- as.numeric(fields[[1]][1])
close(con)
if (configurationData[["Offset"]] == "FALSE")
{
now <- unclass(Sys.time())
diff <- now - startTime
}
else
{
diff <- 0
}
live <- FALSE
}
if (live == TRUE)
{
#Use basic auth
consumer_key <- configurationData[["APIPublicKey"]]
consumer_secret <- configurationData[["APIPrivateKey"]]
secret <- openssl::base64_encode(paste(consumer_key, consumer_secret, sep = ":"));
req <- httr::POST("https://api.twitter.com/oauth2/token",
httr::add_headers(
"Authorization" = paste("Basic", secret),
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"
),
body = "grant_type=client_credentials"
);
## print("req");print(req)
#Extract the access token
token <- paste("Bearer", httr::content(req)$access_token)
}
else
{
con <- file(configurationData[["SourceFile"]], "r")
line <- readLines(con, n = 1)
fields <- strsplit(line, split=" ")
replayBlockTime <- as.numeric(fields[[1]][1])
replayBlockData <- fields[[1]][2]
}
timeEnd <- startTime + sleepyTime + diff
eof <- FALSE
credential <- NULL
refreshStrings <- list()
for (p in 1:polls)
{
if (live == TRUE)
{
refreshStrings <- searcher(dbCon, table, configurationData, refreshStrings, token)
}
else
{
while (replayBlockTime <= timeEnd)
{
updateTable(dbCon, table, replayBlockTime, replayBlockData, configurationData)
line <- readLines(con, n = 1)
if (identical(line, character(0)))
{
print(sprintf("Reached EOF on file: %s",configurationData[["SourceFile"]] ))
eof <- TRUE
break
}
fields <- strsplit(line, split=" ")
replayBlockTime <- as.numeric(fields[[1]][1])
replayBlockData <- fields[[1]][2]
}
Sys.sleep(sleepyTime)
timeEnd <- timeEnd + sleepyTime
}
print(sprintf("Completed poll %.0f of %.0f.",
p, polls))
if(eof == TRUE)
break
}
if (live == FALSE)
{
close(con)
}
print(sprintf("%s() has ended.",
as.character(match.call()[[1]])))
}
main()
